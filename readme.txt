"Hello world!"
Конфігурація Git

Коли GitHub Desktop (і відповідно Git) буде встановлено, 
відкрийте свій термінал. Ви можете перевірити Git просто 
ввівши:

git --version

Це перевне версію Git що встановлено на комп'юері, 
виглядатиме наступним чином:

git version 1.9.1

Далі, налаштуйте Git щоб він знав, із ким асоціювати 
те що ви робите:

Set your name:

git config --global user.name "Your Name"

Now set your email:

git config --global user.email "youremail@example.com"
Створення репозиторія

Ви збираєтеся творити нову папку проекта та ініціалізувати
 у ній Git репозиторій. Назвемо папку 'hello-world', але 
 ви можете вибрати будь-яке інше ім'я, якщо у вас уже є 
 папка із такою назвою.

Час відкрити ваш термінал!

У вікні вашого терміналу, введіть ці команди, по одній за 
раз, натисніть enter/return після кожної.

Перше, створимо нову папку:
Підказка: mkdir використовується для створення папки

mkdir hello-world
Далі, перейдіть до цієї папки:
Підказка: cd використовується для зміни папки

cd hello-world
Останнє, скажіть Git щоб він ініціалізувався 
(почав відслідковувати) у папці де ви зараз знаходитеся:

git init
Остання команда повинна повернути повідомлення що 
починається із "Initialized empty Git repository". 
Інші команди не повертають нічогою

Ви зробили це! Якщо ви хочете ще раз перевірити чи 
це Git репозиторій, введіть git status і якщо ви 
не побачите 'fatal: Not a git repository...', 
у вас все вийшло!

Перевірити статус репозиторія
git status
Переглянути зміни у файлах
git diff
Додати зміни у файлі, для того щоб закомітити
git add <FILENAME>
Щоб додати усі файли
git add .
Для фіксації змін (aka коміту) що ви зробили, 
із коротким повідомленням що їх описує
git commit -m "your commit message"

Щоб змінити юзернейм який ви задали у Git конфіг, просто повторіть
 ту ж команду що виконували раніше, але враховуйте регістр:

git config --global user.username <USerNamE>

Додати віддалене з'єднання
git remote add <REMOTENAME> <URL>

Встановити URL для віддаленого з'єднання
git remote set-url <REMOTENAME> <URL>

Отримати зміни (pull)
git pull <REMOTENAME> <BRANCHNAME>

Переглянути віддалені з'єднання
git remote -v

Надсилання змін (push)
git push <REMOTENAME> <BRANCH>

Коли ви робите форк (fork) реозиторія, ви створюєте 
його копію на власному GitHub аккаунті. Ваша форкнута 
копія починає свій шлях як віддалений (remote) 
репозиторій — він існує лише на вашому GitHub аккаунті,
 а не на вашому комп'ютері. Форки використовуються для 
 створення вашої власної версії проекту (це схоже на 
 розгалуження доріг) або контрибютинг власних змін (наприклад 
 виправлення багів, новий функціонал) в оригінальний проект.

Щоб отримати форкнутий репозиторій із вашого GitHub аккаунту 
на ваш комп'ютер просто клонуйте (clone) його. Ця команда 
завантажить репозиторій на ваш комп'ютер, щоб ви могли 
працювати над ним локально.
Клонування вашого форку

Тепер, у терміналі, вам потрібно скопіювати репозиторій на ваш 
комп'ютер. Автоматично створиться нова папка дял вашого проекту,
 тому не потрібно створювати її власноруч. Але переконайтесь що 
 ви не клонуєте його всередині іншого Git репозиторія!

Впевніться що не всередині папки 'hello-world' із попереднього 
завдання. Для того щоб повернутися назад та можна було клонувати
 репозиторій, потрібно виконати наступні команди:

Перейти на 1 рівень вверх відносно папки 'hello-world':
Підказка: дві крапки означають те що ви підніметеся на один 
рівень вище відносно поточного розсташування

cd ..

Тепер, коли ви не всередині іншого репозиторія, потрібно виконати 
наступну команду:

git clone <URLFROMGITHUB>

Перейдіть у папку із вашою локальною копією проекту в нашому 
випадку вона називається 'patchwork').

cd patchwork

Ви щойно отримали локальну копію репозиторія яка автоматично 
приєнана до вашого віддаленого репозиторія (вашої форкнутої 
копії) на вашому GitHub аккаунті. Введіть git remote -v щоб 
переконатися що адреса дійсно вказує на ваш форк.
Приєднання до оригінального репозиторія

А що якщо оригінальний репозиторій, із якого ви зробили свій 
форк зміниться? Ви захочете отримати (pull) зміни що були зроблені.
 Тому давайте додамо ще одне віддалене з'єднання, цьог оразу воно
  вказуватиме на оригінал, github.com/jlord/patchwork, із наступним URL.

Ви можете дати йому будь-яку назву, проте зазвичай використовується
 ім'я 'upstream'; давайте і ми його використаємо.

git remote add upstream https://github.com/jlord/patchwork.git

Щоб переконатися що під'єднані правильні віддалені сервери, 
введіть git remote -v щоб побачити збережені вами адреси. У 
Вас повинен бути 'origin' із адрусоювашого форку та 'upstream'
 із URL оригінального репозиторія.

 Додати remote
git remote add <REMOTENAME> <URL>
Змінити URL для remote
git remote set-url <REMOTENAME> <URL>
Переглянути віддалені репозиторії
git remote -v


Git репозиторії використовують гілки для ізоляції роботи над 
певною частиною проекту, за потребою. Це загальна практика, 
коли ви працюєте самі, або із іншими людьми над проектом, 
ізолювати свої зміни у власній гілці. Це спосіб працювати 
над своїми функціоналом, в той час, коли на гілці master 
залишається стабільна версія проекту. Коли робота у вашій 
гілці завершена, її можна змерджити у гілку "master".

Діаграма що наведена нижче показує, як ви можете перейти 
на іншу гілку із 'master', зробити свою роботу та змерджити 
зміни назад у 'master' Також ви можете зробити гілку не лише
 із 'master' а із будь-якої іншої гілки.
 Створення гілки

Коли ви створюєте гілку, Git копіює все із вашої поточної гілки
 і кладе це у гілку що ви хочете створити.

Доки ви всередині репозиторія 'patchwork', введіть git status 
щоб побачити гілку в якій ви зараз знаходитесь. Git повинен 
відповісти що ви зараз у гілці 'gh-pages'.

Тепер створіть нову гілку та назвіть її "add-<username>", 
де 'username' це ваш юзернейм. Наприклад, "add-jlord". 
Не забувайте про те що гілки чутливі до регістру .

git branch <BRANCHNAME>

Тепер у вас є гілка, яка ідентична гілці 'gh-pages'.

Щоб перейти у цю гілку та почати у ній працювати, потрібно 
зробити checkout гілки:

git checkout <BRANCHNAME>
Крок: Створення нового файлу

Поверніться у ваш текстовий редактор:

Створіть новий файл із назвою "add-<USERNAME>.txt", 
де 'username' ваш юзернейм. Наприклад, "add-jlord.txt".
Далі, просто напишіть ваш GitHub юзернейм у ньому.
Збережіть цей файл у папці 'contributors' 
у Patchwork: Patchwork/contributors/add-yourusername.txt
Далі, внесіть свої зміни (дивіться нижче).
Внесення змін

Пройдіть ці кроки для внесення змін у проект

git status

git add <contributors/FILENAME>

git commit -m "commit message"

Тепер надішліть (push) ваші зміни до вашого форку, 'origin', 
on GitHub:

git push origin <BRANCHNAME>

Permission denied...error: 403

Ви надсилаєте зміни до репозиторію, до якого немаєте прав на запис.
 В цьому випадку, ви напевне надсилаєте зміни 
 до оригінального 'jlord/patchwork'. Переконайтесь, 
 що ви надсилаєте зміни до 'origin' і він вказує на ваш 
 репозиторій на GitHub. Для того щоб це перевірити виконайте
  git remote -v. Ви повинні отримати 'upstream' що 
  вказує на 'jlord/patchwork' та 'origin' що вказує на 'yourusername/patchwork'.

Щоб виправити цю пробелму потрібно перезаписати url: git remote set-url origin .

Authentication failed...error: 401

Ви не розпізнані. У вас повинна бути увімкнена 2FA (Two Factor Authentication),
 для того щоб підтверджувати свої дії унікальним токеном, таким як пароль.
  Ви можете згенерувати його слідуючи цим інструкціям. Вам потрібно зберегти його, 
  та використовувати як пароль. Також ви можете зберегти цей ключ 
  доступу на вашому комп'ютері і відпаде потреба його вводити кожного разу.

Файл НЕ в папці contributors

Файл що ви створили повинен знаходитися всередині папки 'contributors' 
у репозиторії Patchwork. якщо ви поклали його в іншому місці, просто
 використайте Finder чи Windows Explorer (Провідник) щоб перенести його
  у правильну папку. Ви можете перевірити git status знову і побачите свої зміни.
   Застейджіть а тоді commit "all" (-A) цих змін, за допомогою команд що наведені нижче

git add -A

git commit -m "move file into contributors folder"

Branch name expected: _____

Назва гілки повинна містити саме ваш юзернейм. Для зміни назви гілки, використайте:

git branch -m <NEWBRANCHNAME>

Після внесення змін, зробіть перевірку.
Ви можете створити та перейти у гілку однією командою
git checkout -b <BRANCHNAME>
Створити нову гілку
git branch <BRANCHNAME>
Перейти на гілку
git checkout <BRANCHNAME>
Список гілок
git branch
Перейментувати гілку в якій ви знаходитесь.
git branch -m <NEWBRANCHNAME>
Перевірити, в якій гілці ви знаходитесь.
git status


Можливість працювати разом з іншими це одна з найкращих 
можливостей, які надає GitHub, тому що спрощує роботу з 
будь-якого місця чи часового поясу разом з іншими людьми.

Коллаборатори це інші GitHub юзери, яким надано право вносити
 зміни до репозиторію, який належить комусь іншому. Ви також 
 напевно чули термін contributors, він обозначає іншого GitHub юзера
 який зробив внесок до проекту за допомогою форку та пул реквесту.
 Привіт, Repo Robot!

Для того щоб додати колаборатора до одного з ваших проектів, 
відвідайте сторінку репозиторія на вашому GitHub аккаунті і натисніть 'Settings'
 в меню, яке розташоване в верхній частині сторінки. Потім виберіть 
 опцію 'Collaborators'. Наберіть імя юзера в текстовому полі і натисніть 'Add'.

Переїдіть до сторінки Patchwork репозиторію на GitHub і додайте 
'reporobot' в якості коллаборатора. URL повинен виглядати як 
наведений нижче, але в з вашим іменем користувача.

github.com/YOURUSERNAME/patchwork/settings/collaboration


Затягування з віддаленого репозиторію.
Якщо ви працюєте над чимось разом із іншими, вам необхіодно завжди 
синхронізувати вашу версію файлів з останніми змінами 
Таким чином вам знадобиться зробити pull 
щоб отримати будь-які зміни, які були внесені 
до центрального GitHub репозиторію.
Чим займався Reporobot?

Подивіться чи Reporobot зробив якісь зміни до вашої гілки за допомогою затягування змін
 з віддаленого репозиторію з назвою 'origin' на GitHub:

git pull <REMOTENAME> <BRANCHNAME>

Якщо нічого не змінилось, ви отримаєте повідомлення 'Already up-to-date'. 
Якщо зміни є, Git злиє ці зміни у вашу локальну версію.

Чи зробив Reporobot зміни? Git вказує де зміни були внесені. 
Ви можете відкрити той файл і побачити зміни зроблені Reporobot.
 Сюрприз, Reporobot - артист!
 Перевірка Git статусу
git status
Отримання змін із віддаленої гілки
git pull <REMOTENAME> <REMOTEBRANCH>
Проглянути зміни у віддаленій гілці, перед тим як їх отримувати
git fetch --dry-run

Pull реквести

Часто, коли ви робите зміни до проекту над яким ви працюєте (forked), 
ви хочете надіслати ці зміни до 
упорядника проекту і зробити запит, щоб вони могли затягнути ваші 
зміни до віддаленого репозиторію, таким чином будь-хто може 
скористатися оновленнями які ви внесли - це pull request.

Ми хочемо додати вас до списку тих хто завершив воркшоп,
 будь ласка, зробіть pull request щоб додати ваш файл 
 з іменем до першоджерела: github.com/jlord/patchwork.

 Створення pull request

Відвідайте початковий репозиторій який ви (forked) на GitHub, 
в нашому випадку це http://github.com/jlord/patchwork.

Часто GitHub буде відслідковувати чи ви викладали гілку до 
віддаленого репозиторію і показувати її в верхній частині веб-сайту. 
Якщо гілка з назвою 'add-username' присутня, ви можете створити 
Pull Request натиснувшити на неї. Якщо ні:

Натисніть на зелену кнопку 'New pull request'.
Виберіть гілку зі змінами які вихочите надіслати.
 Це повинна бути гілка з 'add-yourusername'.
Тепер ви зможете побачити сторінку з деталями про pull request 
який зараз знаходиться у процесі надсилання. Ця сторінка показує 
комміти та зміни, у вигляді схеми, повязаними з вашим pull request і 
в порівнянні з 'gh-pages' гілкою з початкового репозиторію.

Якщо початковий репозиторій має contribution documentation, 
GitHub вкаже посилання на неї. Це документація від власників репозиторію, 
яка описує як робити зміни в цей проект і якшо ви хочете, 
щоб ваші зміни були додані, варто звернути на неї увагу.

Якщо все на сторінці виглядає так як ви очікуєте:

Натисніть 'Create pull request'
Додайте назву та опис до змін, які ви просити власника репозиторію затягнути.
Натисніть 'Send pull request'!
Бінго! Ви додали pull request - зупиніться на хвильку і насолодіться моментом.

Якщо все добре з вашим pull request, він буде злитий протягом декількох секунд.
 Якщо він не був автоматично злитий протягом декількох хвилин, 
 скоріше за все ви отримаєте коментарі від @reporobot чому злиття
  не пройшло вдало. Якщо такі коментарі присутні, закрийте pull request 
  на GitHub, внесіть необхідні зміни до вашої гілки, надішліть зміни до
   репозиторію та перевідкрийте ваш pull request,
 що в свою чергу змусить @reporobot переглянути їх знову.


 Очищення

Якщо гілки більше не потрібні, ви можете видалити їх локально і віддалено. 
Вчасне видалення - зручний 
спосіб підтримання чистоти і зручної структурованості репозиторію.


Локальний мердж

Ваш pull request був злитий. Ваша гілка була злита в гілку 
'gh-pages' оригінального репозиторію на GitHub. Ви можете злити вашу гілку також локально.

Для початку, перемістіться у гілку в яку ви хочете змерджити,
 в нашому випадку це буде гілка 'gh-pages'.

git checkout gh-pages

Тепер вкажіть яку саме гілку ви хочете сюди змерджити. В цьому випадку,
 ваша гілку яка починається з "add-".

git merge <BRANCHNAME>

Очистіть репозиторій за рахунок видалення цієї гілки. Тепер коли вона 
вже була злита вам вона вже не потрібна тут.

git branch -d <BRANCHNAME>

Ви також можете видалити цю гілку з віддаленого репозиторію на GitHub:

git push <REMOTENAME> --delete <BRANCHNAME>
Затягнення з Upstream

І останній пункт, який також є дуже важливим, початковий репозиторій 
був змінений коли ваш pull request був злитий. Reporobot додав ваше 
імя на веб-сайті. Якщо ви затягнете ці зміни з upstream, ви отримаєте
 зміни які є в тій версії також. Ви можете переглянути 
 їх в: yourusername.github.io/patchwork.

Щоб затягнути з original upstream:

git pull upstream gh-pages
Злити в поточну гілку
git merge <BRANCHNAME>
Змінити гілку в якій ви працюєте
git checkout <BRANCHNAME>
Видалити локальну гілку
git branch -d <BRANCHNAME>
Видалити віддалену гілку
git push <REMOTENAME> --delete <BRANCHNAME>
Затягнути с віддаленого репозиторію
git pull <REMOTENAME> <BRANCHNAME>